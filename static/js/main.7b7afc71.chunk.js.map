{"version":3,"sources":["components/Header.tsx","components/AboutMe.tsx","components/Skills.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","link","textDecoration","color","Header","props","classes","className","AppBar","position","Toolbar","Typography","variant","noWrap","to","Button","AboutMe","StyledTableCell","withStyles","head","backgroundColor","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","action","hover","TableRow","rows","table","minWidth","Skills","TableContainer","component","Paper","Table","aria-label","TableHead","align","TableBody","map","row","key","Main","main","Container","Box","my","path","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7b7afc71.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    link: {\r\n      textDecoration: \"none\",\r\n      color: \"white\",\r\n    },\r\n  })\r\n);\r\n\r\nconst Header: React.FC = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Teshima's portfolio\r\n          </Typography>\r\n\r\n          <Link to=\"/aboutme\" className={classes.link}>\r\n            <Button color=\"inherit\">about me</Button>\r\n          </Link>\r\n          <Link to=\"/skills\" className={classes.link}>\r\n            <Button color=\"inherit\">skills</Button>\r\n          </Link>\r\n          <Link to=\"/work\" className={classes.link}>\r\n            <Button color=\"inherit\">work</Button>\r\n          </Link>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst AboutMe: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Typography variant=\"h2\">AboutMe</Typography>\r\n      <Typography variant=\"h3\">経歴</Typography>\r\n      <Typography>大手SIer8年目</Typography>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AboutMe;\r\n","import React from \"react\";\r\nimport {\r\n  withStyles,\r\n  Theme,\r\n  createStyles,\r\n  makeStyles,\r\n} from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  })\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\nconst rows = [\r\n  [\"PHP\", 5, \r\n  `フレームワーク（FuelPHP,CodeIgniter）を使用し、\r\n  キュレーションサービスのバックエンドを作成可能。また、\r\n  PurePHPを用いてフルスクラッチでSNSを作成した経験あり`\r\n　],\r\n  [\"Ruby\", 3, \r\n  `フレームワーク（Ruby on Rails）を使用しキュレーションサービスのバックエンドを作成可能。\r\n  また、Webスクレイピングによる情報収集等も可能`\r\n  ],\r\n  [\"JavaScript\", 1, \r\n  `React, jQueryを用いた簡易なWebサイト構築可能。\r\n  また、Ruby on Railsをバックエンドとして開発も経験\r\n  `],\r\n  [\"VBA\", 3,\r\n  `Seleniumが使用不可能な環境で、社内のWebテスト自動化ツールを作成\r\n  社内の誰もが使用可能となるよう、Excelでミニ言語を作成し、簡易にシナリオ作成を可能とした。\r\n  また、社内向けの定常作業の自動化も多く実装し、全体の工数削減に貢献`\r\n  ],\r\n];\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n});\r\n\r\nconst Skills: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <h2>スキル</h2>\r\n      <pre>整理中です。</pre>\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"customized table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"right\">言語</StyledTableCell>\r\n              <StyledTableCell align=\"right\">経験年数</StyledTableCell>\r\n              <StyledTableCell align=\"right\">レベル</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <StyledTableRow key={row[0]}>\r\n                <StyledTableCell align=\"right\">{row[0]}</StyledTableCell>\r\n                <StyledTableCell align=\"right\">{row[1]}</StyledTableCell>\r\n                <StyledTableCell align=\"right\">{row[2]}</StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Skills;\r\n","import React from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { Route } from \"react-router-dom\";\r\nimport AboutMe from \"./AboutMe\";\r\nimport Skills from \"./Skills\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    main: {\r\n      flexGrow: 1,\r\n    },\r\n  })\r\n);\r\n\r\nconst Main: React.FC = () => {\r\n  return (\r\n    <Container>\r\n      <Box my={2}>\r\n        this is main contents teshima's portfolio 現在、作成中です。\r\n      </Box>\r\n      <Route path=\"/aboutme\" component={AboutMe}></Route>\r\n      <Route path=\"/skills\" component={Skills}></Route>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Main from \"./components/Main\";\r\nimport { CssBaseline } from \"@material-ui/core\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <CssBaseline />\r\n        <Header />\r\n        <Toolbar />\r\n        <Main />\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}